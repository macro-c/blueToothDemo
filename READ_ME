首先，本文讲述的是对等的端到端的通信，并不涉及一些蓝牙外设等的硬件编程，但读懂了本文后，蓝牙外设的原理也能推测一二。本文没有详细列举所有通信的接口，不适合作为傻瓜式教程。

第二，简述下IOS端蓝牙编程中的概念。1.蓝牙是一种通信工具，相比网络，由于蓝牙信号的衰减，少有中继设备参与，限制了设备间的通信距离；2.其通信机制类似UDP，以数据包为单位，但由于其接收端是以通知实现，且不支持消息分片（但支持通知队列），因此发送大文件需要的保障，由应用之间协商实现；3.蓝牙通信双方分别是两种角色，即外设（peripheral）和中心（central），双方建立连接过程中，外设类似服务器，他是被动连接，中心是主动连接方。这一点很重要，在保持连接的过程中，外设没有权限主动断开连接，但可以选择性的发送消息给某些中心设备，因此，通信双方实际具备近乎平等的关系。4.外设可以提供多种服务（service），可以设置某个服务为主服务（primary），每个服务可以包含多个特征（characteristic），特征是连接双方通信的接口（可以想象成网络连接中的套接字），自定义的服务和特征以自定义的UUID作为唯一标识。

最后讲一下各种方式连接的细节。
在外设端，初始化peripheralManager，添加自定义的service和characteristic，最终开启广播。广播可以展示设备的身份、展示提供的服务、列出服务中的所有特征值、展示部分广播数据；
中心设备在此时，便可以连接外设，读取外设的所有广播信息，但外设是否已经被连接，外设端无法收到通知；
中心设备在连接之后，主动（这里的*主动*很重要）订阅了外设的某个服务中某个特征
```
（setNotifyValue：forCharacteristic：
```
后，外设回调了代理方法
```
peripheralManager:central:didSubscribeToCharacteristic:
```
在方法中可以记录中心设备参数central。在此时，是外设可以更新特征的正确起点（在此时之前，无法得知是否有中心设备连接--同时也表示，旨在实现双向通信的中心设备应该主动订阅特征）。
向中心设备发送数据：外设端更新被订阅的特征的值
```
updateValue:forCharacteristic:onSubscribedCentrals:
```
这里发送的value数据有大小限制，可以在保存的central的maximumUpdateValueLength属性得知。超过大小限制的话，也是会传输失败。
此时，第三个参数onSubscribedCentrals，设置为nil则全部订阅的中心会接收到数据，否则可以限制部分订阅中心收到数据。
当收到中心端发送的数据时，外设的代理方法：
```
peripheralManager:didReceiveWriteRequests:
```
读取中心端发送的数据，并主动回复中心端
```
respondToRequest:withResult:
```
result参数为CBATTError类型枚举，表示回答此次传输的结果。

至此，外设端实现了双向通信，也实现了作为中心，与多个中心设备通信


在中心端，连接某个外设之后，便可以遍历其所有服务，和所有特征，并可以手动读取当前特征值中的数据
```
readValueForCharacteristic:character
```
而在订阅了特征值之后，收到外设的数据是通过回调如下方法
```
peripheral:didUpdateValueForCharacteristic:error:
```
实现的。
中心端主动发送的数据，是通过对特征的写请求实现
```
writeValue:forCharacteristic:type:
```
这里value参数的大小，并没有明文提示，经过在6s和6设备的测试，上限为512bytes，超过的话传输失败。
其中type参数，可选的是CBCharacteristicWriteWithResponse和XXXXWithoutResponse，这里应该使用，WithResponse参数。
之后超时10秒在回调方法：
```
peripheral:didWriteValueForCharacteristic:error:
```
中等待外设端发回的回复，若超时会受到未知错误。

至此，中心端也完成了双向通信的过程。
